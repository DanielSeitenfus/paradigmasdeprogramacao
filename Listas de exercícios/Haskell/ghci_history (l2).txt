GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
Prelude> :load l2.hs

<no location info>: error: can't find file: l2.hs
Failed, no modules loaded.
Prelude> :cd C:\Users\danie\Desktop\UFSM\Ciência da Computação\Paradigmas de Programação\paradigmasdeprogramacao\Listas de exercícios
Prelude> :load "l2.hs"
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> add10toall [1, 2, 3, 4, 5]
[11,12,13,14,15]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> multN 2 [1,2,3,4,5,6]
[2,4,6,8,10,12]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> applyExpr [1,2,3,4,5,6]
[5,8,11,14,17,20]
*Main> addSufix "@inf.ufsm.br" ["dbseitenfus","jcaggens"]

<interactive>:15:1: error:
    Variable not in scope: addSufix :: [Char] -> [[Char]] -> t
*Main> addSuffix "@inf.ufsm.br" ["dbseitenfus","jcaggens"]

<interactive>:16:1: error:
    Variable not in scope: addSuffix :: [Char] -> [[Char]] -> t
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> addSufix "@inf.ufsm.br" ["dbseitenfus","jcaggens"]

<interactive>:18:1: error:
    • Variable not in scope: addSufix :: [Char] -> [[Char]] -> t
    • Perhaps you meant ‘addSuffix’ (line 15)
*Main> addSuffix "@inf.ufsm.br" ["dbseitenfus","jcaggens"]
["dbseitenfus@inf.ufsm.br","jcaggens@inf.ufsm.br"]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> selectgt5 [1,2,3,4,5,6,7,8,9,10]
[6,7,8,9,10]
*Main> :reload

l2.hs:22:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
22 | sumOdds :: [Int] -> Int    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:26:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
26 | selectExpr :: [Int] -> [Int]    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:26:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
26 | selectExpr :: [Int] -> [Int]    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:26:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
26 | selectExpr :: [Int] -> [Int]    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:26:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
26 | selectExpr :: [Int] -> [Int]    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:26:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
26 | selectExpr :: [Int] -> [Int]    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:26:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
26 | selectExpr :: [Int] -> [Int]    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:26:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
26 | selectExpr :: [Int] -> [Int]    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:26:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
26 | selectExpr :: [Int] -> [Int]    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload

l2.hs:30:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
30 | countShorts :: [String] -> Int    | ^
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> selectExpr [20,21,22,23,24,25]
[22,24]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> countShorts ["123456","12345","12","123

<interactive>:35:40: error:
    lexical error in string/character literal at end of input
*Main> countShorts ["123456","12345","12","12345678910"]
1
*Main> countShorts ["123456","12345","12","1"]
2
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> calcExpr [1,2,3,4,5,6,7,8,9,10]
[12.5,18.0,24.5,32.0,40.5,50.0]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> calcExpr [1,2,3,4,5,6,7,8,9,10]
[12.5,18.0,24.5,32.0,40.5,50.0]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )

l2.hs:42:52: error:
    • Couldn't match expected type ‘Bool’ with actual type ‘Char’
    • In the expression: x
      In the expression: if x == ' ' then x else '-'
      In a stmt of a list comprehension: if x == ' ' then x else '-'
   |
42 | trSpaces string = [x | x <- string, if x==' ' then x else '-']
   |                                                    ^

l2.hs:42:59: error:
    • Couldn't match expected type ‘Bool’ with actual type ‘Char’
    • In the expression: '-'
      In the expression: if x == ' ' then x else '-'
      In a stmt of a list comprehension: if x == ' ' then x else '-'
   |
42 | trSpaces string = [x | x <- string, if x==' ' then x else '-']
   |                                                           ^^^
Failed, no modules loaded.
Prelude> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> trSpaces "aaa a a a a"
"--- - - - -"
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> trSpaces "a a a a a a"
"a-a-a-a-a-a"
*Main> [ (x,y) | x <- [1..5], even x, y <- [(x + 1)..6], odd y ]
[(2,3),(2,5),(4,5)]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> selectSnd [(1,2),(3,4)]
[2,4]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )

l2.hs:50:25: error:
    • Couldn't match type ‘(Int, Int)’ with ‘Int’
      Expected type: [Int]
        Actual type: [(Int, Int)]
    • In the expression: zip lista1 lista2
      In an equation for ‘dotProd’:
          dotProd lista1 lista2 = zip lista1 lista2
   |
50 | dotProd lista1 lista2 = zip lista1 lista2
   |                         ^^^^^^^^^^^^^^^^^
Failed, no modules loaded.
Prelude> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> dotProd [1,2,3,4,5] [1,2,3,4,5]
[(1,1),(2,2),(3,3),(4,4),(5,5)]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> dotProd [1,2,3,4,5] [1,2,3,4,5]
[1,4,9,16,25]
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )

l2.hs:50:25: error:
    • Couldn't match expected type ‘[Int]’ with actual type ‘Int’
    • In the expression:
        sum [fst (x) * snd (x) | x <- zip lista1 lista2]
      In an equation for ‘dotProd’:
          dotProd lista1 lista2
            = sum [fst (x) * snd (x) | x <- zip lista1 lista2]
   |
50 | dotProd lista1 lista2 = sum [fst(x)*snd(x) | x <- zip lista1 lista2]
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Failed, no modules loaded.
Prelude> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> dotProd [1,2,3,4,5] [1,2,3,4,5]
55
*Main> dotProd [1,1,1,1] [1,1,1,1]
4
*Main> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )

l2.hs:23:46: error:
    • Variable not in scope: (\=) :: Int -> Integer -> Bool
    • Perhaps you meant one of these:
        ‘>=’ (imported from Prelude), ‘==’ (imported from Prelude),
        ‘/=’ (imported from Prelude)
   |
23 | sumOdds lista = sum [x | x <- lista, mod x 2 \=0]    |                                              ^^
Failed, no modules loaded.
Prelude> :reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> 
l2.hs:23:42: error:
    • Variable not in scope: (\=) :: Int -> Integer -> Bool
    • Perhaps you meant one of these:
        ‘>=’ (imported from Prelude), ‘==’ (imported from Prelude),
        ‘/=’ (imported from Prelude)
   |
23 | sumOdds lista = [x | x <- lista, mod x 2 \= 0]    |                                          ^^
:reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Failed, no modules loaded.
Prelude> 
l2.hs:23:17: error:
    • Couldn't match expected type ‘Int’ with actual type ‘[Int]’
    • In the expression: [x | x <- lista, mod x 2 /= 0]
      In an equation for ‘sumOdds’:
          sumOdds lista = [x | x <- lista, mod x 2 /= 0]
   |
23 | sumOdds lista = [x | x <- lista, mod x 2 /= 0]    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
:reload
[1 of 1] Compiling Main             ( l2.hs, interpreted )
Ok, one module loaded.
*Main> sumOdds [1,2,3,4,5,6]
9
*Main> 